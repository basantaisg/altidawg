

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_5ySi1BxpUuWa@ep-wispy-paper-a19k55ek-pooler.ap-southeast-1.aws.neon.tech/bakadawg?sslmode=require&channel_binding=require"
}

model Operator {
  id String @id @default(cuid())
  name String
  phone String
  email String?
  apiKey String @unique
  createdAt DateTime @default(now())
  experiences Experience[]
}

model Experience {
  id String @id @default(cuid())
  operatorId String 
  operator Operator @relation(fields: [operatorId], references: [id])
  title String 
  description String
  city String
  tags String[]
  priceNpr Int 
  maxGroupSize Int 
  coverImageUrl String?
  geoLat Float?
  geolng Float?
  isActive Boolean
  createdAt DateTime @default(now())
  slots Slot[]
}

model Slot {
  id String @id @default(cuid())
  experienceId String 
  experience Experience @relation(fields: [experienceId], references: [id])
  startTime DateTime
  endTime DateTime
  seatsTotal Int 
  seatsBooked Int 
  createdAt DateTime
  bookings Booking[]
}

model Booking {
 id String @id @default(cuid())
 slotId String 
 slot Slot @relation(fields: [slotId], references: [id]) 
customerName String
customerPhone String 
pax Int
note String?
status BookingStatus @default(PENDING)
createdAt DateTime @default(now())
}

enum BookingStatus {
  PENDING
  CONFIRMED
  DECLINED
  CANCELLED
}